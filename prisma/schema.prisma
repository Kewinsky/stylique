// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String?
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())

  orders    Order[]
  reviews   Review[]
  addresses Address[]
  cart      CartItem[]
  wishlist  WishlistItem[]

  Payment Payment[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  images      String[] // Array of image URLs
  isNew       Boolean  @default(false)
  categoryId  String
  createdAt   DateTime @default(now())

  category   Category       @relation(fields: [categoryId], references: [id])
  reviews    Review[]
  orderItems OrderItem[]
  wishlist   WishlistItem[]
  cart       CartItem[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  products Product[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  addressId String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())

  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]
  payment Payment?
  address Address     @relation(fields: [addressId], references: [id])
}

model OrderItem {
  id        String @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  userId    String
  amount    Float
  status    PaymentStatus @default(PENDING)
  createdAt DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Address {
  id        String   @id @default(uuid())
  userId    String
  fullName  String
  street    String
  city      String
  country   String
  zipCode   String
  createdAt DateTime @default(now())

  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

model CartItem {
  id        String @id @default(uuid())
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model WishlistItem {
  id        String @id @default(uuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
